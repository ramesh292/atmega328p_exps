
Test_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000070a  00800100  00000898  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000898  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001193  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fd  00000000  00000000  000022bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000101c  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00003bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006e31  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000839  00000000  00000000  0000ab3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000b376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002a2e  00000000  00000000  0000b426  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	18 e0       	ldi	r17, 0x08	; 8
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b8 e0       	ldi	r27, 0x08	; 8
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	ac d3       	rcall	.+1880   	; 0x7f4 <main>
  9c:	fb c3       	rjmp	.+2038   	; 0x894 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <all_high>:
			 if(x==13) display(0);
		}
	}
	set_pin(x,e_low);
	x++;
	if(x==14) x=10;
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	d4 d2       	rcall	.+1448   	; 0x64e <set_pin>
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	d1 d2       	rcall	.+1442   	; 0x64e <set_pin>
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	ce d2       	rcall	.+1436   	; 0x64e <set_pin>
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	cb d2       	rcall	.+1430   	; 0x64e <set_pin>
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	c8 d2       	rcall	.+1424   	; 0x64e <set_pin>
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	c5 d2       	rcall	.+1418   	; 0x64e <set_pin>
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	c2 c2       	rjmp	.+1412   	; 0x64e <set_pin>
  ca:	08 95       	ret

000000cc <all_low>:
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	be d2       	rcall	.+1404   	; 0x64e <set_pin>
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	bb d2       	rcall	.+1398   	; 0x64e <set_pin>
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	b8 d2       	rcall	.+1392   	; 0x64e <set_pin>
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	b5 d2       	rcall	.+1386   	; 0x64e <set_pin>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	b2 d2       	rcall	.+1380   	; 0x64e <set_pin>
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	af d2       	rcall	.+1374   	; 0x64e <set_pin>
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	ac c2       	rjmp	.+1368   	; 0x64e <set_pin>
  f6:	08 95       	ret

000000f8 <display>:
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ec 01       	movw	r28, r24
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	29 f4       	brne	.+10     	; 0x10c <display+0x14>
 102:	ce df       	rcall	.-100    	; 0xa0 <all_high>
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	a2 d2       	rcall	.+1348   	; 0x64e <set_pin>
 10a:	15 c0       	rjmp	.+42     	; 0x136 <display+0x3e>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	41 f4       	brne	.+16     	; 0x122 <display+0x2a>
 112:	dc df       	rcall	.-72     	; 0xcc <all_low>
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	9a d2       	rcall	.+1332   	; 0x64e <set_pin>
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	97 d2       	rcall	.+1326   	; 0x64e <set_pin>
 120:	15 c0       	rjmp	.+42     	; 0x14c <display+0x54>
 122:	02 97       	sbiw	r24, 0x02	; 2
 124:	41 f4       	brne	.+16     	; 0x136 <display+0x3e>
 126:	bc df       	rcall	.-136    	; 0xa0 <all_high>
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	90 d2       	rcall	.+1312   	; 0x64e <set_pin>
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	8d d2       	rcall	.+1306   	; 0x64e <set_pin>
 134:	19 c0       	rjmp	.+50     	; 0x168 <display+0x70>
 136:	c3 30       	cpi	r28, 0x03	; 3
 138:	d1 05       	cpc	r29, r1
 13a:	41 f4       	brne	.+16     	; 0x14c <display+0x54>
 13c:	b1 df       	rcall	.-158    	; 0xa0 <all_high>
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	85 d2       	rcall	.+1290   	; 0x64e <set_pin>
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	82 d2       	rcall	.+1284   	; 0x64e <set_pin>
 14a:	19 c0       	rjmp	.+50     	; 0x17e <display+0x86>
 14c:	c4 30       	cpi	r28, 0x04	; 4
 14e:	d1 05       	cpc	r29, r1
 150:	59 f4       	brne	.+22     	; 0x168 <display+0x70>
 152:	a6 df       	rcall	.-180    	; 0xa0 <all_high>
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	7a d2       	rcall	.+1268   	; 0x64e <set_pin>
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	77 d2       	rcall	.+1262   	; 0x64e <set_pin>
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	74 d2       	rcall	.+1256   	; 0x64e <set_pin>
 166:	13 c0       	rjmp	.+38     	; 0x18e <display+0x96>
 168:	c5 30       	cpi	r28, 0x05	; 5
 16a:	d1 05       	cpc	r29, r1
 16c:	41 f4       	brne	.+16     	; 0x17e <display+0x86>
 16e:	98 df       	rcall	.-208    	; 0xa0 <all_high>
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	6c d2       	rcall	.+1240   	; 0x64e <set_pin>
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	69 d2       	rcall	.+1234   	; 0x64e <set_pin>
 17c:	16 c0       	rjmp	.+44     	; 0x1aa <display+0xb2>
 17e:	c6 30       	cpi	r28, 0x06	; 6
 180:	d1 05       	cpc	r29, r1
 182:	29 f4       	brne	.+10     	; 0x18e <display+0x96>
 184:	8d df       	rcall	.-230    	; 0xa0 <all_high>
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	61 d2       	rcall	.+1218   	; 0x64e <set_pin>
 18c:	13 c0       	rjmp	.+38     	; 0x1b4 <display+0xbc>
 18e:	c7 30       	cpi	r28, 0x07	; 7
 190:	d1 05       	cpc	r29, r1
 192:	59 f4       	brne	.+22     	; 0x1aa <display+0xb2>
 194:	9b df       	rcall	.-202    	; 0xcc <all_low>
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	59 d2       	rcall	.+1202   	; 0x64e <set_pin>
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	56 d2       	rcall	.+1196   	; 0x64e <set_pin>
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	88 e0       	ldi	r24, 0x08	; 8
 1a6:	53 d2       	rcall	.+1190   	; 0x64e <set_pin>
 1a8:	0b c0       	rjmp	.+22     	; 0x1c0 <display+0xc8>
 1aa:	c8 30       	cpi	r28, 0x08	; 8
 1ac:	d1 05       	cpc	r29, r1
 1ae:	11 f4       	brne	.+4      	; 0x1b4 <display+0xbc>
 1b0:	77 df       	rcall	.-274    	; 0xa0 <all_high>
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <display+0xc8>
 1b4:	29 97       	sbiw	r28, 0x09	; 9
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <display+0xc8>
 1b8:	73 df       	rcall	.-282    	; 0xa0 <all_high>
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	47 d2       	rcall	.+1166   	; 0x64e <set_pin>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <displaynoWithoutPoint>:
 1c6:	8f 92       	push	r8
 1c8:	9f 92       	push	r9
 1ca:	af 92       	push	r10
 1cc:	bf 92       	push	r11
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	9c 01       	movw	r18, r24
 1e4:	ed b6       	in	r14, 0x3d	; 61
 1e6:	fe b6       	in	r15, 0x3e	; 62
 1e8:	18 16       	cp	r1, r24
 1ea:	19 06       	cpc	r1, r25
 1ec:	0c f0       	brlt	.+2      	; 0x1f0 <displaynoWithoutPoint+0x2a>
 1ee:	5a c0       	rjmp	.+180    	; 0x2a4 <displaynoWithoutPoint+0xde>
 1f0:	e0 e0       	ldi	r30, 0x00	; 0
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	0f 2e       	mov	r0, r31
 1f6:	fa e0       	ldi	r31, 0x0A	; 10
 1f8:	cf 2e       	mov	r12, r31
 1fa:	d1 2c       	mov	r13, r1
 1fc:	f0 2d       	mov	r31, r0
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <displaynoWithoutPoint+0x3c>
 200:	f8 01       	movw	r30, r16
 202:	b6 01       	movw	r22, r12
 204:	20 d3       	rcall	.+1600   	; 0x846 <__divmodhi4>
 206:	cb 01       	movw	r24, r22
 208:	8f 01       	movw	r16, r30
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
 20e:	18 16       	cp	r1, r24
 210:	19 06       	cpc	r1, r25
 212:	b4 f3       	brlt	.-20     	; 0x200 <displaynoWithoutPoint+0x3a>
 214:	c8 01       	movw	r24, r16
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	4d b7       	in	r20, 0x3d	; 61
 21c:	5e b7       	in	r21, 0x3e	; 62
 21e:	48 1b       	sub	r20, r24
 220:	59 0b       	sbc	r21, r25
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	5e bf       	out	0x3e, r21	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	4d bf       	out	0x3d, r20	; 61
 22c:	8d b7       	in	r24, 0x3d	; 61
 22e:	9e b7       	in	r25, 0x3e	; 62
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	5c 01       	movw	r10, r24
 234:	ff 23       	and	r31, r31
 236:	ec f0       	brlt	.+58     	; 0x272 <displaynoWithoutPoint+0xac>
 238:	6f 01       	movw	r12, r30
 23a:	cc 0c       	add	r12, r12
 23c:	dd 1c       	adc	r13, r13
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	c9 0e       	add	r12, r25
 242:	d1 1c       	adc	r13, r1
 244:	ca 0c       	add	r12, r10
 246:	db 1c       	adc	r13, r11
 248:	0f 2e       	mov	r0, r31
 24a:	fa e0       	ldi	r31, 0x0A	; 10
 24c:	8f 2e       	mov	r8, r31
 24e:	91 2c       	mov	r9, r1
 250:	f0 2d       	mov	r31, r0
 252:	c9 01       	movw	r24, r18
 254:	b4 01       	movw	r22, r8
 256:	f7 d2       	rcall	.+1518   	; 0x846 <__divmodhi4>
 258:	d6 01       	movw	r26, r12
 25a:	9e 93       	st	-X, r25
 25c:	8e 93       	st	-X, r24
 25e:	6d 01       	movw	r12, r26
 260:	a9 01       	movw	r20, r18
 262:	48 1b       	sub	r20, r24
 264:	59 0b       	sbc	r21, r25
 266:	ca 01       	movw	r24, r20
 268:	b4 01       	movw	r22, r8
 26a:	ed d2       	rcall	.+1498   	; 0x846 <__divmodhi4>
 26c:	9b 01       	movw	r18, r22
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	80 f7       	brcc	.-32     	; 0x252 <displaynoWithoutPoint+0x8c>
 272:	10 16       	cp	r1, r16
 274:	11 06       	cpc	r1, r17
 276:	b4 f4       	brge	.+44     	; 0x2a4 <displaynoWithoutPoint+0xde>
 278:	65 01       	movw	r12, r10
 27a:	00 0f       	add	r16, r16
 27c:	11 1f       	adc	r17, r17
 27e:	0a 0d       	add	r16, r10
 280:	1b 1d       	adc	r17, r11
 282:	d6 01       	movw	r26, r12
 284:	8d 91       	ld	r24, X+
 286:	9d 91       	ld	r25, X+
 288:	6d 01       	movw	r12, r26
 28a:	36 df       	rcall	.-404    	; 0xf8 <display>
 28c:	bf ef       	ldi	r27, 0xFF	; 255
 28e:	ef e0       	ldi	r30, 0x0F	; 15
 290:	f7 e2       	ldi	r31, 0x27	; 39
 292:	b1 50       	subi	r27, 0x01	; 1
 294:	e0 40       	sbci	r30, 0x00	; 0
 296:	f0 40       	sbci	r31, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <displaynoWithoutPoint+0xcc>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <displaynoWithoutPoint+0xd6>
 29c:	00 00       	nop
 29e:	0c 15       	cp	r16, r12
 2a0:	1d 05       	cpc	r17, r13
 2a2:	79 f7       	brne	.-34     	; 0x282 <displaynoWithoutPoint+0xbc>
 2a4:	13 df       	rcall	.-474    	; 0xcc <all_low>
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	fe be       	out	0x3e, r15	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	ed be       	out	0x3d, r14	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	08 95       	ret

000002ca <cal_display>:
	}
}

void cal_display(){
	static int x=10;
	all_low();
 2ca:	00 df       	rcall	.-512    	; 0xcc <all_low>
	//int noTime=0;
	int presentvalue=0;
	int lastvalue=1; // 1 and -1 + and -
	int sign=1;// * / 1 0
	int ans=0;
 2cc:	81 2c       	mov	r8, r1
 2ce:	91 2c       	mov	r9, r1
	static int x=10;
	all_low();
	//int noTime=0;
	int presentvalue=0;
	int lastvalue=1; // 1 and -1 + and -
	int sign=1;// * / 1 0
 2d0:	cc 24       	eor	r12, r12
 2d2:	c3 94       	inc	r12
 2d4:	d1 2c       	mov	r13, r1
void cal_display(){
	static int x=10;
	all_low();
	//int noTime=0;
	int presentvalue=0;
	int lastvalue=1; // 1 and -1 + and -
 2d6:	aa 24       	eor	r10, r10
 2d8:	a3 94       	inc	r10
 2da:	b1 2c       	mov	r11, r1

void cal_display(){
	static int x=10;
	all_low();
	//int noTime=0;
	int presentvalue=0;
 2dc:	c0 e0       	ldi	r28, 0x00	; 0
 2de:	d0 e0       	ldi	r29, 0x00	; 0
	int lastvalue=1; // 1 and -1 + and -
	int sign=1;// * / 1 0
	int ans=0;
	while(1){
		set_pin(x,e_high);
 2e0:	00 e0       	ldi	r16, 0x00	; 0
 2e2:	11 e0       	ldi	r17, 0x01	; 1
						ans+=lastvalue;
						displaynoWithoutPoint(ans);
						//noTime=0;
						presentvalue=0;
						lastvalue=1;
						sign=1;
 2e4:	22 24       	eor	r2, r2
 2e6:	23 94       	inc	r2
 2e8:	31 2c       	mov	r3, r1
						else lastvalue /= presentvalue;
						
						ans+=lastvalue;
						displaynoWithoutPoint(ans);
						//noTime=0;
						presentvalue=0;
 2ea:	41 2c       	mov	r4, r1
 2ec:	51 2c       	mov	r5, r1
				_delay_ms(500);
			}
		}
		set_pin(x,e_low);
		x++;
		if(x==14) x=10;
 2ee:	0f 2e       	mov	r0, r31
 2f0:	fa e0       	ldi	r31, 0x0A	; 10
 2f2:	ef 2e       	mov	r14, r31
 2f4:	f1 2c       	mov	r15, r1
 2f6:	f0 2d       	mov	r31, r0
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <cal_display+0x38>
				}
				_delay_ms(500);
			}
		}
		set_pin(x,e_low);
		x++;
 2fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	int presentvalue=0;
	int lastvalue=1; // 1 and -1 + and -
	int sign=1;// * / 1 0
	int ans=0;
	while(1){
		set_pin(x,e_high);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	f8 01       	movw	r30, r16
 306:	80 81       	ld	r24, Z
 308:	a2 d1       	rcall	.+836    	; 0x64e <set_pin>
		for(int i=0;i<4;i++)
 30a:	61 2c       	mov	r6, r1
 30c:	71 2c       	mov	r7, r1
		{
			if (PINC & _BV(i)) {
 30e:	86 b1       	in	r24, 0x06	; 6
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2c       	mov	r0, r6
 314:	02 c0       	rjmp	.+4      	; 0x31a <cal_display+0x50>
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <cal_display+0x4c>
 31e:	80 ff       	sbrs	r24, 0
 320:	a6 c0       	rjmp	.+332    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
				if(i<=2 && x-10<=2){
 322:	f3 e0       	ldi	r31, 0x03	; 3
 324:	6f 16       	cp	r6, r31
 326:	71 04       	cpc	r7, r1
 328:	ec f4       	brge	.+58     	; 0x364 <cal_display+0x9a>
 32a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 32e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 332:	0a 97       	sbiw	r24, 0x0a	; 10
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	91 05       	cpc	r25, r1
 338:	ac f4       	brge	.+42     	; 0x364 <cal_display+0x9a>
					int k=(x-10)*3+1+i;
					//display(k);
					presentvalue=presentvalue*10+k;
 33a:	9e 01       	movw	r18, r28
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	cc 0f       	add	r28, r28
 342:	dd 1f       	adc	r29, r29
 344:	cc 0f       	add	r28, r28
 346:	dd 1f       	adc	r29, r29
 348:	cc 0f       	add	r28, r28
 34a:	dd 1f       	adc	r29, r29
 34c:	c2 0f       	add	r28, r18
 34e:	d3 1f       	adc	r29, r19
 350:	9c 01       	movw	r18, r24
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	82 0f       	add	r24, r18
 358:	93 1f       	adc	r25, r19
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	86 0d       	add	r24, r6
 35e:	97 1d       	adc	r25, r7
 360:	c8 0f       	add	r28, r24
 362:	d9 1f       	adc	r29, r25
					//noTime++;
					//presentvalue+=k*l;
					//displaynoWithoutPoint(l);
				}
				
				if(i==3){
 364:	23 e0       	ldi	r18, 0x03	; 3
 366:	62 16       	cp	r6, r18
 368:	71 04       	cpc	r7, r1
 36a:	d9 f5       	brne	.+118    	; 0x3e2 <cal_display+0x118>
					if(x==12||x==11){
 36c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 370:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 374:	c9 01       	movw	r24, r18
 376:	0b 97       	sbiw	r24, 0x0b	; 11
 378:	02 97       	sbiw	r24, 0x02	; 2
 37a:	d0 f4       	brcc	.+52     	; 0x3b0 <cal_display+0xe6>
						
						if(sign == 1) lastvalue*=presentvalue;
 37c:	ca 94       	dec	r12
 37e:	cd 28       	or	r12, r13
 380:	49 f4       	brne	.+18     	; 0x394 <cal_display+0xca>
 382:	f5 01       	movw	r30, r10
 384:	ec 9f       	mul	r30, r28
 386:	50 01       	movw	r10, r0
 388:	ed 9f       	mul	r30, r29
 38a:	b0 0c       	add	r11, r0
 38c:	fc 9f       	mul	r31, r28
 38e:	b0 0c       	add	r11, r0
 390:	11 24       	eor	r1, r1
 392:	04 c0       	rjmp	.+8      	; 0x39c <cal_display+0xd2>
						else lastvalue /=presentvalue;
 394:	c5 01       	movw	r24, r10
 396:	be 01       	movw	r22, r28
 398:	56 d2       	rcall	.+1196   	; 0x846 <__divmodhi4>
 39a:	5b 01       	movw	r10, r22
						//displaynoWithoutPoint(lastvalue);
						
						
						if(x==12) sign=0;
						else sign=1;
 39c:	92 2d       	mov	r25, r2
 39e:	83 2d       	mov	r24, r3
 3a0:	2c 30       	cpi	r18, 0x0C	; 12
 3a2:	31 05       	cpc	r19, r1
 3a4:	11 f4       	brne	.+4      	; 0x3aa <cal_display+0xe0>
 3a6:	94 2d       	mov	r25, r4
 3a8:	85 2d       	mov	r24, r5
 3aa:	c9 2e       	mov	r12, r25
 3ac:	d8 2e       	mov	r13, r24
 3ae:	79 c0       	rjmp	.+242    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
						//noTime=0;
						presentvalue=0;
						
					}else{
							if(sign == 1) lastvalue*=presentvalue;
 3b0:	ca 94       	dec	r12
 3b2:	cd 28       	or	r12, r13
 3b4:	41 f4       	brne	.+16     	; 0x3c6 <cal_display+0xfc>
 3b6:	ca 9d       	mul	r28, r10
 3b8:	b0 01       	movw	r22, r0
 3ba:	cb 9d       	mul	r28, r11
 3bc:	70 0d       	add	r23, r0
 3be:	da 9d       	mul	r29, r10
 3c0:	70 0d       	add	r23, r0
 3c2:	11 24       	eor	r1, r1
							else lastvalue /= presentvalue;
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <cal_display+0x102>
 3c6:	c5 01       	movw	r24, r10
 3c8:	be 01       	movw	r22, r28
 3ca:	3d d2       	rcall	.+1146   	; 0x846 <__divmodhi4>
							//display(0);
							
							ans+=lastvalue;
 3cc:	86 0e       	add	r8, r22
 3ce:	97 1e       	adc	r9, r23
							presentvalue=0;
							
							if(x == 10) lastvalue=-1;
 3d0:	2a 30       	cpi	r18, 0x0A	; 10
 3d2:	31 05       	cpc	r19, r1
 3d4:	e1 f1       	breq	.+120    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
							else lastvalue = 1;
							//noTime=0;
							sign=1;
 3d6:	c2 2c       	mov	r12, r2
 3d8:	d3 2c       	mov	r13, r3
							
							ans+=lastvalue;
							presentvalue=0;
							
							if(x == 10) lastvalue=-1;
							else lastvalue = 1;
 3da:	aa 24       	eor	r10, r10
 3dc:	a3 94       	inc	r10
 3de:	b1 2c       	mov	r11, r1
 3e0:	60 c0       	rjmp	.+192    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
							sign=1;
							
					}
					
				}
				if(x==13){
 3e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ea:	0d 97       	sbiw	r24, 0x0d	; 13
 3ec:	b9 f5       	brne	.+110    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
					if(i==1){
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	62 16       	cp	r6, r18
 3f2:	71 04       	cpc	r7, r1
 3f4:	61 f4       	brne	.+24     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
						presentvalue*=10;
 3f6:	ce 01       	movw	r24, r28
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	cc 0f       	add	r28, r28
 3fe:	dd 1f       	adc	r29, r29
 400:	cc 0f       	add	r28, r28
 402:	dd 1f       	adc	r29, r29
 404:	cc 0f       	add	r28, r28
 406:	dd 1f       	adc	r29, r29
 408:	c8 0f       	add	r28, r24
 40a:	d9 1f       	adc	r29, r25
 40c:	27 c0       	rjmp	.+78     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
					}
					if(i==2){
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	68 16       	cp	r6, r24
 412:	71 04       	cpc	r7, r1
 414:	19 f5       	brne	.+70     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
						//display(lastvalue);
						if(sign == 1) lastvalue*=presentvalue;
 416:	ca 94       	dec	r12
 418:	cd 28       	or	r12, r13
 41a:	41 f4       	brne	.+16     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41c:	ca 9d       	mul	r28, r10
 41e:	b0 01       	movw	r22, r0
 420:	cb 9d       	mul	r28, r11
 422:	70 0d       	add	r23, r0
 424:	da 9d       	mul	r29, r10
 426:	70 0d       	add	r23, r0
 428:	11 24       	eor	r1, r1
						else lastvalue /= presentvalue;
 42a:	03 c0       	rjmp	.+6      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42c:	c5 01       	movw	r24, r10
 42e:	be 01       	movw	r22, r28
						
						ans+=lastvalue;
						displaynoWithoutPoint(ans);
 430:	0a d2       	rcall	.+1044   	; 0x846 <__divmodhi4>
 432:	cb 01       	movw	r24, r22
 434:	88 0d       	add	r24, r8
 436:	99 1d       	adc	r25, r9
 438:	c6 de       	rcall	.-628    	; 0x1c6 <displaynoWithoutPoint>
						//noTime=0;
						presentvalue=0;
						lastvalue=1;
						sign=1;
						ans=0;
 43a:	81 2c       	mov	r8, r1
 43c:	91 2c       	mov	r9, r1
						ans+=lastvalue;
						displaynoWithoutPoint(ans);
						//noTime=0;
						presentvalue=0;
						lastvalue=1;
						sign=1;
 43e:	c2 2c       	mov	r12, r2
 440:	d3 2c       	mov	r13, r3
						
						ans+=lastvalue;
						displaynoWithoutPoint(ans);
						//noTime=0;
						presentvalue=0;
						lastvalue=1;
 442:	aa 24       	eor	r10, r10
 444:	a3 94       	inc	r10
 446:	b1 2c       	mov	r11, r1
						else lastvalue /= presentvalue;
						
						ans+=lastvalue;
						displaynoWithoutPoint(ans);
						//noTime=0;
						presentvalue=0;
 448:	c4 2d       	mov	r28, r4
 44a:	d5 2d       	mov	r29, r5
 44c:	07 c0       	rjmp	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
							presentvalue=0;
							
							if(x == 10) lastvalue=-1;
							else lastvalue = 1;
							//noTime=0;
							sign=1;
 44e:	c2 2c       	mov	r12, r2
 450:	d3 2c       	mov	r13, r3
							//display(0);
							
							ans+=lastvalue;
							presentvalue=0;
							
							if(x == 10) lastvalue=-1;
 452:	aa 24       	eor	r10, r10
 454:	aa 94       	dec	r10
 456:	ba 2c       	mov	r11, r10
							if(sign == 1) lastvalue*=presentvalue;
							else lastvalue /= presentvalue;
							//display(0);
							
							ans+=lastvalue;
							presentvalue=0;
 458:	c4 2d       	mov	r28, r4
 45a:	d5 2d       	mov	r29, r5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45c:	9f ef       	ldi	r25, 0xFF	; 255
 45e:	e9 e6       	ldi	r30, 0x69	; 105
 460:	f8 e1       	ldi	r31, 0x18	; 24
 462:	91 50       	subi	r25, 0x01	; 1
 464:	e0 40       	sbci	r30, 0x00	; 0
 466:	f0 40       	sbci	r31, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
	int lastvalue=1; // 1 and -1 + and -
	int sign=1;// * / 1 0
	int ans=0;
	while(1){
		set_pin(x,e_high);
		for(int i=0;i<4;i++)
 46e:	2f ef       	ldi	r18, 0xFF	; 255
 470:	62 1a       	sub	r6, r18
 472:	72 0a       	sbc	r7, r18
 474:	84 e0       	ldi	r24, 0x04	; 4
 476:	68 16       	cp	r6, r24
 478:	71 04       	cpc	r7, r1
 47a:	09 f0       	breq	.+2      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
					}
				}
				_delay_ms(500);
			}
		}
		set_pin(x,e_low);
 47c:	48 cf       	rjmp	.-368    	; 0x30e <cal_display+0x44>
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	f8 01       	movw	r30, r16
 482:	80 81       	ld	r24, Z
 484:	e4 d0       	rcall	.+456    	; 0x64e <set_pin>
		x++;
 486:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 48a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 48e:	01 96       	adiw	r24, 0x01	; 1
		if(x==14) x=10;
 490:	8e 30       	cpi	r24, 0x0E	; 14
 492:	91 05       	cpc	r25, r1
 494:	09 f0       	breq	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 496:	31 cf       	rjmp	.-414    	; 0x2fa <cal_display+0x30>
 498:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 49c:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a0:	30 cf       	rjmp	.-416    	; 0x302 <cal_display+0x38>
							if(sign == 1) lastvalue*=presentvalue;
							else lastvalue /= presentvalue;
							//display(0);
							
							ans+=lastvalue;
							presentvalue=0;
 4a2:	c4 2d       	mov	r28, r4
 4a4:	d5 2d       	mov	r29, r5
 4a6:	da cf       	rjmp	.-76     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>

000004a8 <init_pin>:
{
	//find DDRx, set mode
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
	{
		if(pin_lookup[i][3]==pin)
 4a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pin_lookup+0x3>
 4ac:	89 17       	cp	r24, r25
 4ae:	41 f0       	breq	.+16     	; 0x4c0 <init_pin+0x18>
 4b0:	e9 e6       	ldi	r30, 0x69	; 105
 4b2:	f1 e0       	ldi	r31, 0x01	; 1

void init_pin(uint8_t pin, pin_mode_t mode)
{
	//find DDRx, set mode
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(pin_lookup[i][3]==pin)
 4b8:	90 81       	ld	r25, Z
 4ba:	98 13       	cpse	r25, r24
 4bc:	bf c0       	rjmp	.+382    	; 0x63c <init_pin+0x194>
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <init_pin+0x1c>

void init_pin(uint8_t pin, pin_mode_t mode)
{
	//find DDRx, set mode
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(pin_lookup[i][3]==pin)
		{
			if(mode == e_input && pin_lookup[i][4]!=0){
 4c4:	61 11       	cpse	r22, r1
 4c6:	5b c0       	rjmp	.+182    	; 0x57e <init_pin+0xd6>
 4c8:	84 e6       	ldi	r24, 0x64	; 100
 4ca:	82 9f       	mul	r24, r18
 4cc:	f0 01       	movw	r30, r0
 4ce:	83 9f       	mul	r24, r19
 4d0:	f0 0d       	add	r31, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	ee 5f       	subi	r30, 0xFE	; 254
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	84 81       	ldd	r24, Z+4	; 0x04
 4da:	88 23       	and	r24, r24
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <init_pin+0x38>
 4de:	b6 c0       	rjmp	.+364    	; 0x64c <init_pin+0x1a4>
				if(pin_lookup[i][1]==2) DDRB ^=pin_lookup[i][2];
 4e0:	84 e6       	ldi	r24, 0x64	; 100
 4e2:	82 9f       	mul	r24, r18
 4e4:	f0 01       	movw	r30, r0
 4e6:	83 9f       	mul	r24, r19
 4e8:	f0 0d       	add	r31, r0
 4ea:	11 24       	eor	r1, r1
 4ec:	ee 5f       	subi	r30, 0xFE	; 254
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	81 81       	ldd	r24, Z+1	; 0x01
 4f2:	82 30       	cpi	r24, 0x02	; 2
 4f4:	61 f4       	brne	.+24     	; 0x50e <init_pin+0x66>
 4f6:	94 b1       	in	r25, 0x04	; 4
 4f8:	84 e6       	ldi	r24, 0x64	; 100
 4fa:	82 9f       	mul	r24, r18
 4fc:	f0 01       	movw	r30, r0
 4fe:	83 9f       	mul	r24, r19
 500:	f0 0d       	add	r31, r0
 502:	11 24       	eor	r1, r1
 504:	ee 5f       	subi	r30, 0xFE	; 254
 506:	fe 4f       	sbci	r31, 0xFE	; 254
 508:	82 81       	ldd	r24, Z+2	; 0x02
 50a:	89 27       	eor	r24, r25
 50c:	84 b9       	out	0x04, r24	; 4
				if(pin_lookup[i][1]==3) DDRC ^=pin_lookup[i][2];
 50e:	84 e6       	ldi	r24, 0x64	; 100
 510:	82 9f       	mul	r24, r18
 512:	f0 01       	movw	r30, r0
 514:	83 9f       	mul	r24, r19
 516:	f0 0d       	add	r31, r0
 518:	11 24       	eor	r1, r1
 51a:	ee 5f       	subi	r30, 0xFE	; 254
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	81 81       	ldd	r24, Z+1	; 0x01
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	61 f4       	brne	.+24     	; 0x53c <init_pin+0x94>
 524:	97 b1       	in	r25, 0x07	; 7
 526:	84 e6       	ldi	r24, 0x64	; 100
 528:	82 9f       	mul	r24, r18
 52a:	f0 01       	movw	r30, r0
 52c:	83 9f       	mul	r24, r19
 52e:	f0 0d       	add	r31, r0
 530:	11 24       	eor	r1, r1
 532:	ee 5f       	subi	r30, 0xFE	; 254
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	82 81       	ldd	r24, Z+2	; 0x02
 538:	89 27       	eor	r24, r25
 53a:	87 b9       	out	0x07, r24	; 7
				if(pin_lookup[i][1]==4) DDRD ^=pin_lookup[i][2];
 53c:	84 e6       	ldi	r24, 0x64	; 100
 53e:	82 9f       	mul	r24, r18
 540:	f0 01       	movw	r30, r0
 542:	83 9f       	mul	r24, r19
 544:	f0 0d       	add	r31, r0
 546:	11 24       	eor	r1, r1
 548:	ee 5f       	subi	r30, 0xFE	; 254
 54a:	fe 4f       	sbci	r31, 0xFE	; 254
 54c:	81 81       	ldd	r24, Z+1	; 0x01
 54e:	84 30       	cpi	r24, 0x04	; 4
 550:	61 f4       	brne	.+24     	; 0x56a <init_pin+0xc2>
 552:	9a b1       	in	r25, 0x0a	; 10
 554:	84 e6       	ldi	r24, 0x64	; 100
 556:	82 9f       	mul	r24, r18
 558:	f0 01       	movw	r30, r0
 55a:	83 9f       	mul	r24, r19
 55c:	f0 0d       	add	r31, r0
 55e:	11 24       	eor	r1, r1
 560:	ee 5f       	subi	r30, 0xFE	; 254
 562:	fe 4f       	sbci	r31, 0xFE	; 254
 564:	82 81       	ldd	r24, Z+2	; 0x02
 566:	89 27       	eor	r24, r25
 568:	8a b9       	out	0x0a, r24	; 10
				//DDRB ^= pin_lookup[i][2];
				pin_lookup[i][4]=0;
 56a:	84 e6       	ldi	r24, 0x64	; 100
 56c:	82 9f       	mul	r24, r18
 56e:	f0 01       	movw	r30, r0
 570:	83 9f       	mul	r24, r19
 572:	f0 0d       	add	r31, r0
 574:	11 24       	eor	r1, r1
 576:	ee 5f       	subi	r30, 0xFE	; 254
 578:	fe 4f       	sbci	r31, 0xFE	; 254
 57a:	14 82       	std	Z+4, r1	; 0x04
 57c:	08 95       	ret
			} 
			if(mode== e_output && pin_lookup[i][4]!=1)
 57e:	61 30       	cpi	r22, 0x01	; 1
 580:	09 f0       	breq	.+2      	; 0x584 <init_pin+0xdc>
 582:	64 c0       	rjmp	.+200    	; 0x64c <init_pin+0x1a4>
 584:	84 e6       	ldi	r24, 0x64	; 100
 586:	82 9f       	mul	r24, r18
 588:	f0 01       	movw	r30, r0
 58a:	83 9f       	mul	r24, r19
 58c:	f0 0d       	add	r31, r0
 58e:	11 24       	eor	r1, r1
 590:	ee 5f       	subi	r30, 0xFE	; 254
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	84 81       	ldd	r24, Z+4	; 0x04
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	09 f4       	brne	.+2      	; 0x59c <init_pin+0xf4>
 59a:	58 c0       	rjmp	.+176    	; 0x64c <init_pin+0x1a4>
			{
				if(pin_lookup[i][1]==2) DDRB |=pin_lookup[i][2];
 59c:	84 e6       	ldi	r24, 0x64	; 100
 59e:	82 9f       	mul	r24, r18
 5a0:	f0 01       	movw	r30, r0
 5a2:	83 9f       	mul	r24, r19
 5a4:	f0 0d       	add	r31, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	ee 5f       	subi	r30, 0xFE	; 254
 5aa:	fe 4f       	sbci	r31, 0xFE	; 254
 5ac:	81 81       	ldd	r24, Z+1	; 0x01
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	61 f4       	brne	.+24     	; 0x5ca <init_pin+0x122>
 5b2:	94 b1       	in	r25, 0x04	; 4
 5b4:	84 e6       	ldi	r24, 0x64	; 100
 5b6:	82 9f       	mul	r24, r18
 5b8:	f0 01       	movw	r30, r0
 5ba:	83 9f       	mul	r24, r19
 5bc:	f0 0d       	add	r31, r0
 5be:	11 24       	eor	r1, r1
 5c0:	ee 5f       	subi	r30, 0xFE	; 254
 5c2:	fe 4f       	sbci	r31, 0xFE	; 254
 5c4:	82 81       	ldd	r24, Z+2	; 0x02
 5c6:	89 2b       	or	r24, r25
 5c8:	84 b9       	out	0x04, r24	; 4
				if(pin_lookup[i][1]==3) DDRC |=pin_lookup[i][2];
 5ca:	84 e6       	ldi	r24, 0x64	; 100
 5cc:	82 9f       	mul	r24, r18
 5ce:	f0 01       	movw	r30, r0
 5d0:	83 9f       	mul	r24, r19
 5d2:	f0 0d       	add	r31, r0
 5d4:	11 24       	eor	r1, r1
 5d6:	ee 5f       	subi	r30, 0xFE	; 254
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	81 81       	ldd	r24, Z+1	; 0x01
 5dc:	83 30       	cpi	r24, 0x03	; 3
 5de:	61 f4       	brne	.+24     	; 0x5f8 <init_pin+0x150>
 5e0:	97 b1       	in	r25, 0x07	; 7
 5e2:	84 e6       	ldi	r24, 0x64	; 100
 5e4:	82 9f       	mul	r24, r18
 5e6:	f0 01       	movw	r30, r0
 5e8:	83 9f       	mul	r24, r19
 5ea:	f0 0d       	add	r31, r0
 5ec:	11 24       	eor	r1, r1
 5ee:	ee 5f       	subi	r30, 0xFE	; 254
 5f0:	fe 4f       	sbci	r31, 0xFE	; 254
 5f2:	82 81       	ldd	r24, Z+2	; 0x02
 5f4:	89 2b       	or	r24, r25
 5f6:	87 b9       	out	0x07, r24	; 7
				if(pin_lookup[i][1]==4) DDRD |=pin_lookup[i][2];
 5f8:	84 e6       	ldi	r24, 0x64	; 100
 5fa:	82 9f       	mul	r24, r18
 5fc:	f0 01       	movw	r30, r0
 5fe:	83 9f       	mul	r24, r19
 600:	f0 0d       	add	r31, r0
 602:	11 24       	eor	r1, r1
 604:	ee 5f       	subi	r30, 0xFE	; 254
 606:	fe 4f       	sbci	r31, 0xFE	; 254
 608:	81 81       	ldd	r24, Z+1	; 0x01
 60a:	84 30       	cpi	r24, 0x04	; 4
 60c:	61 f4       	brne	.+24     	; 0x626 <init_pin+0x17e>
 60e:	9a b1       	in	r25, 0x0a	; 10
 610:	84 e6       	ldi	r24, 0x64	; 100
 612:	82 9f       	mul	r24, r18
 614:	f0 01       	movw	r30, r0
 616:	83 9f       	mul	r24, r19
 618:	f0 0d       	add	r31, r0
 61a:	11 24       	eor	r1, r1
 61c:	ee 5f       	subi	r30, 0xFE	; 254
 61e:	fe 4f       	sbci	r31, 0xFE	; 254
 620:	82 81       	ldd	r24, Z+2	; 0x02
 622:	89 2b       	or	r24, r25
 624:	8a b9       	out	0x0a, r24	; 10
				//DDRB |= pin_lookup[i][2];
				pin_lookup[i][4]=1;
 626:	84 e6       	ldi	r24, 0x64	; 100
 628:	82 9f       	mul	r24, r18
 62a:	f0 01       	movw	r30, r0
 62c:	83 9f       	mul	r24, r19
 62e:	f0 0d       	add	r31, r0
 630:	11 24       	eor	r1, r1
 632:	ee 5f       	subi	r30, 0xFE	; 254
 634:	fe 4f       	sbci	r31, 0xFE	; 254
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	84 83       	std	Z+4, r24	; 0x04
 63a:	08 95       	ret

void init_pin(uint8_t pin, pin_mode_t mode)
{
	//find DDRx, set mode
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
 63c:	2f 5f       	subi	r18, 0xFF	; 255
 63e:	3f 4f       	sbci	r19, 0xFF	; 255
 640:	ec 59       	subi	r30, 0x9C	; 156
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	22 31       	cpi	r18, 0x12	; 18
 646:	31 05       	cpc	r19, r1
 648:	09 f0       	breq	.+2      	; 0x64c <init_pin+0x1a4>
 64a:	36 cf       	rjmp	.-404    	; 0x4b8 <init_pin+0x10>
 64c:	08 95       	ret

0000064e <set_pin>:
{
	//find PORTx, set state
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
	{
		if(pin_lookup[i][3]==pin)
 64e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pin_lookup+0x3>
 652:	89 17       	cp	r24, r25
 654:	41 f0       	breq	.+16     	; 0x666 <set_pin+0x18>
 656:	e9 e6       	ldi	r30, 0x69	; 105
 658:	f1 e0       	ldi	r31, 0x01	; 1

void set_pin(uint8_t pin, pin_state_t state)
{
	//find PORTx, set state
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(pin_lookup[i][3]==pin)
 65e:	90 81       	ld	r25, Z
 660:	98 13       	cpse	r25, r24
 662:	bf c0       	rjmp	.+382    	; 0x7e2 <set_pin+0x194>
 664:	02 c0       	rjmp	.+4      	; 0x66a <set_pin+0x1c>

void set_pin(uint8_t pin, pin_state_t state)
{
	//find PORTx, set state
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(pin_lookup[i][3]==pin)
		{
			if(state == e_low && pin_lookup[i][5]!=0){
 66a:	61 11       	cpse	r22, r1
 66c:	5b c0       	rjmp	.+182    	; 0x724 <set_pin+0xd6>
 66e:	84 e6       	ldi	r24, 0x64	; 100
 670:	82 9f       	mul	r24, r18
 672:	f0 01       	movw	r30, r0
 674:	83 9f       	mul	r24, r19
 676:	f0 0d       	add	r31, r0
 678:	11 24       	eor	r1, r1
 67a:	ee 5f       	subi	r30, 0xFE	; 254
 67c:	fe 4f       	sbci	r31, 0xFE	; 254
 67e:	85 81       	ldd	r24, Z+5	; 0x05
 680:	88 23       	and	r24, r24
 682:	09 f4       	brne	.+2      	; 0x686 <set_pin+0x38>
 684:	b6 c0       	rjmp	.+364    	; 0x7f2 <set_pin+0x1a4>
				if(pin_lookup[i][1]==2) PORTB ^=pin_lookup[i][2];
 686:	84 e6       	ldi	r24, 0x64	; 100
 688:	82 9f       	mul	r24, r18
 68a:	f0 01       	movw	r30, r0
 68c:	83 9f       	mul	r24, r19
 68e:	f0 0d       	add	r31, r0
 690:	11 24       	eor	r1, r1
 692:	ee 5f       	subi	r30, 0xFE	; 254
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	81 81       	ldd	r24, Z+1	; 0x01
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	61 f4       	brne	.+24     	; 0x6b4 <set_pin+0x66>
 69c:	95 b1       	in	r25, 0x05	; 5
 69e:	84 e6       	ldi	r24, 0x64	; 100
 6a0:	82 9f       	mul	r24, r18
 6a2:	f0 01       	movw	r30, r0
 6a4:	83 9f       	mul	r24, r19
 6a6:	f0 0d       	add	r31, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	ee 5f       	subi	r30, 0xFE	; 254
 6ac:	fe 4f       	sbci	r31, 0xFE	; 254
 6ae:	82 81       	ldd	r24, Z+2	; 0x02
 6b0:	89 27       	eor	r24, r25
 6b2:	85 b9       	out	0x05, r24	; 5
				if(pin_lookup[i][1]==3) PORTC ^=pin_lookup[i][2];
 6b4:	84 e6       	ldi	r24, 0x64	; 100
 6b6:	82 9f       	mul	r24, r18
 6b8:	f0 01       	movw	r30, r0
 6ba:	83 9f       	mul	r24, r19
 6bc:	f0 0d       	add	r31, r0
 6be:	11 24       	eor	r1, r1
 6c0:	ee 5f       	subi	r30, 0xFE	; 254
 6c2:	fe 4f       	sbci	r31, 0xFE	; 254
 6c4:	81 81       	ldd	r24, Z+1	; 0x01
 6c6:	83 30       	cpi	r24, 0x03	; 3
 6c8:	61 f4       	brne	.+24     	; 0x6e2 <set_pin+0x94>
 6ca:	98 b1       	in	r25, 0x08	; 8
 6cc:	84 e6       	ldi	r24, 0x64	; 100
 6ce:	82 9f       	mul	r24, r18
 6d0:	f0 01       	movw	r30, r0
 6d2:	83 9f       	mul	r24, r19
 6d4:	f0 0d       	add	r31, r0
 6d6:	11 24       	eor	r1, r1
 6d8:	ee 5f       	subi	r30, 0xFE	; 254
 6da:	fe 4f       	sbci	r31, 0xFE	; 254
 6dc:	82 81       	ldd	r24, Z+2	; 0x02
 6de:	89 27       	eor	r24, r25
 6e0:	88 b9       	out	0x08, r24	; 8
				if(pin_lookup[i][1]==4) PORTD ^=pin_lookup[i][2];
 6e2:	84 e6       	ldi	r24, 0x64	; 100
 6e4:	82 9f       	mul	r24, r18
 6e6:	f0 01       	movw	r30, r0
 6e8:	83 9f       	mul	r24, r19
 6ea:	f0 0d       	add	r31, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	ee 5f       	subi	r30, 0xFE	; 254
 6f0:	fe 4f       	sbci	r31, 0xFE	; 254
 6f2:	81 81       	ldd	r24, Z+1	; 0x01
 6f4:	84 30       	cpi	r24, 0x04	; 4
 6f6:	61 f4       	brne	.+24     	; 0x710 <set_pin+0xc2>
 6f8:	9b b1       	in	r25, 0x0b	; 11
 6fa:	84 e6       	ldi	r24, 0x64	; 100
 6fc:	82 9f       	mul	r24, r18
 6fe:	f0 01       	movw	r30, r0
 700:	83 9f       	mul	r24, r19
 702:	f0 0d       	add	r31, r0
 704:	11 24       	eor	r1, r1
 706:	ee 5f       	subi	r30, 0xFE	; 254
 708:	fe 4f       	sbci	r31, 0xFE	; 254
 70a:	82 81       	ldd	r24, Z+2	; 0x02
 70c:	89 27       	eor	r24, r25
 70e:	8b b9       	out	0x0b, r24	; 11
				//pin_lookup[i][1] ^= pin_lookup[i][2];
				pin_lookup[i][5]=0;
 710:	84 e6       	ldi	r24, 0x64	; 100
 712:	82 9f       	mul	r24, r18
 714:	f0 01       	movw	r30, r0
 716:	83 9f       	mul	r24, r19
 718:	f0 0d       	add	r31, r0
 71a:	11 24       	eor	r1, r1
 71c:	ee 5f       	subi	r30, 0xFE	; 254
 71e:	fe 4f       	sbci	r31, 0xFE	; 254
 720:	15 82       	std	Z+5, r1	; 0x05
 722:	08 95       	ret
			}
			if(state == e_high && pin_lookup[i][5]!=1)
 724:	61 30       	cpi	r22, 0x01	; 1
 726:	09 f0       	breq	.+2      	; 0x72a <set_pin+0xdc>
 728:	64 c0       	rjmp	.+200    	; 0x7f2 <set_pin+0x1a4>
 72a:	84 e6       	ldi	r24, 0x64	; 100
 72c:	82 9f       	mul	r24, r18
 72e:	f0 01       	movw	r30, r0
 730:	83 9f       	mul	r24, r19
 732:	f0 0d       	add	r31, r0
 734:	11 24       	eor	r1, r1
 736:	ee 5f       	subi	r30, 0xFE	; 254
 738:	fe 4f       	sbci	r31, 0xFE	; 254
 73a:	85 81       	ldd	r24, Z+5	; 0x05
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	09 f4       	brne	.+2      	; 0x742 <set_pin+0xf4>
 740:	58 c0       	rjmp	.+176    	; 0x7f2 <set_pin+0x1a4>
			{
				if(pin_lookup[i][1]==2) PORTB |=pin_lookup[i][2];
 742:	84 e6       	ldi	r24, 0x64	; 100
 744:	82 9f       	mul	r24, r18
 746:	f0 01       	movw	r30, r0
 748:	83 9f       	mul	r24, r19
 74a:	f0 0d       	add	r31, r0
 74c:	11 24       	eor	r1, r1
 74e:	ee 5f       	subi	r30, 0xFE	; 254
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	81 81       	ldd	r24, Z+1	; 0x01
 754:	82 30       	cpi	r24, 0x02	; 2
 756:	61 f4       	brne	.+24     	; 0x770 <set_pin+0x122>
 758:	95 b1       	in	r25, 0x05	; 5
 75a:	84 e6       	ldi	r24, 0x64	; 100
 75c:	82 9f       	mul	r24, r18
 75e:	f0 01       	movw	r30, r0
 760:	83 9f       	mul	r24, r19
 762:	f0 0d       	add	r31, r0
 764:	11 24       	eor	r1, r1
 766:	ee 5f       	subi	r30, 0xFE	; 254
 768:	fe 4f       	sbci	r31, 0xFE	; 254
 76a:	82 81       	ldd	r24, Z+2	; 0x02
 76c:	89 2b       	or	r24, r25
 76e:	85 b9       	out	0x05, r24	; 5
				if(pin_lookup[i][1]==3) PORTC |=pin_lookup[i][2];
 770:	84 e6       	ldi	r24, 0x64	; 100
 772:	82 9f       	mul	r24, r18
 774:	f0 01       	movw	r30, r0
 776:	83 9f       	mul	r24, r19
 778:	f0 0d       	add	r31, r0
 77a:	11 24       	eor	r1, r1
 77c:	ee 5f       	subi	r30, 0xFE	; 254
 77e:	fe 4f       	sbci	r31, 0xFE	; 254
 780:	81 81       	ldd	r24, Z+1	; 0x01
 782:	83 30       	cpi	r24, 0x03	; 3
 784:	61 f4       	brne	.+24     	; 0x79e <set_pin+0x150>
 786:	98 b1       	in	r25, 0x08	; 8
 788:	84 e6       	ldi	r24, 0x64	; 100
 78a:	82 9f       	mul	r24, r18
 78c:	f0 01       	movw	r30, r0
 78e:	83 9f       	mul	r24, r19
 790:	f0 0d       	add	r31, r0
 792:	11 24       	eor	r1, r1
 794:	ee 5f       	subi	r30, 0xFE	; 254
 796:	fe 4f       	sbci	r31, 0xFE	; 254
 798:	82 81       	ldd	r24, Z+2	; 0x02
 79a:	89 2b       	or	r24, r25
 79c:	88 b9       	out	0x08, r24	; 8
				if(pin_lookup[i][1]==4) PORTD |=pin_lookup[i][2];
 79e:	84 e6       	ldi	r24, 0x64	; 100
 7a0:	82 9f       	mul	r24, r18
 7a2:	f0 01       	movw	r30, r0
 7a4:	83 9f       	mul	r24, r19
 7a6:	f0 0d       	add	r31, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	ee 5f       	subi	r30, 0xFE	; 254
 7ac:	fe 4f       	sbci	r31, 0xFE	; 254
 7ae:	81 81       	ldd	r24, Z+1	; 0x01
 7b0:	84 30       	cpi	r24, 0x04	; 4
 7b2:	61 f4       	brne	.+24     	; 0x7cc <set_pin+0x17e>
 7b4:	9b b1       	in	r25, 0x0b	; 11
 7b6:	84 e6       	ldi	r24, 0x64	; 100
 7b8:	82 9f       	mul	r24, r18
 7ba:	f0 01       	movw	r30, r0
 7bc:	83 9f       	mul	r24, r19
 7be:	f0 0d       	add	r31, r0
 7c0:	11 24       	eor	r1, r1
 7c2:	ee 5f       	subi	r30, 0xFE	; 254
 7c4:	fe 4f       	sbci	r31, 0xFE	; 254
 7c6:	82 81       	ldd	r24, Z+2	; 0x02
 7c8:	89 2b       	or	r24, r25
 7ca:	8b b9       	out	0x0b, r24	; 11
				//pin_lookup[i][1] |= pin_lookup[i][2];
				pin_lookup[i][5]=1;
 7cc:	84 e6       	ldi	r24, 0x64	; 100
 7ce:	82 9f       	mul	r24, r18
 7d0:	f0 01       	movw	r30, r0
 7d2:	83 9f       	mul	r24, r19
 7d4:	f0 0d       	add	r31, r0
 7d6:	11 24       	eor	r1, r1
 7d8:	ee 5f       	subi	r30, 0xFE	; 254
 7da:	fe 4f       	sbci	r31, 0xFE	; 254
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	85 83       	std	Z+5, r24	; 0x05
 7e0:	08 95       	ret

void set_pin(uint8_t pin, pin_state_t state)
{
	//find PORTx, set state
	int n = sizeof(pin_lookup)/sizeof(pin_lookup[0]);
	for(int i=0;i<n;i++)
 7e2:	2f 5f       	subi	r18, 0xFF	; 255
 7e4:	3f 4f       	sbci	r19, 0xFF	; 255
 7e6:	ec 59       	subi	r30, 0x9C	; 156
 7e8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ea:	22 31       	cpi	r18, 0x12	; 18
 7ec:	31 05       	cpc	r19, r1
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <set_pin+0x1a4>
 7f0:	36 cf       	rjmp	.-404    	; 0x65e <set_pin+0x10>
 7f2:	08 95       	ret

000007f4 <main>:
	
	//DDRB |= _BV(4);
	//DDRB |= _BV(5);  //data directing register
	
	//7 segment code
	init_pin(2,e_output);
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	57 de       	rcall	.-850    	; 0x4a8 <init_pin>
	init_pin(3,e_output);
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	54 de       	rcall	.-856    	; 0x4a8 <init_pin>
	init_pin(4,e_output);
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	84 e0       	ldi	r24, 0x04	; 4
 804:	51 de       	rcall	.-862    	; 0x4a8 <init_pin>
	init_pin(5,e_output);
 806:	61 e0       	ldi	r22, 0x01	; 1
 808:	85 e0       	ldi	r24, 0x05	; 5
 80a:	4e de       	rcall	.-868    	; 0x4a8 <init_pin>
	init_pin(6,e_output);
 80c:	61 e0       	ldi	r22, 0x01	; 1
 80e:	86 e0       	ldi	r24, 0x06	; 6
 810:	4b de       	rcall	.-874    	; 0x4a8 <init_pin>
	init_pin(7,e_output);
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	87 e0       	ldi	r24, 0x07	; 7
 816:	48 de       	rcall	.-880    	; 0x4a8 <init_pin>
	init_pin(8,e_output);
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	88 e0       	ldi	r24, 0x08	; 8
 81c:	45 de       	rcall	.-886    	; 0x4a8 <init_pin>
	init_pin(9,e_output);
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	89 e0       	ldi	r24, 0x09	; 9
 822:	42 de       	rcall	.-892    	; 0x4a8 <init_pin>
	//keypad
	// c1 c2 c3 c4
	// 10 11 12 13 
	init_pin(10,e_output);
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	8a e0       	ldi	r24, 0x0A	; 10
 828:	3f de       	rcall	.-898    	; 0x4a8 <init_pin>
	init_pin(11,e_output);
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	8b e0       	ldi	r24, 0x0B	; 11
	init_pin(12,e_output);
 82e:	3c de       	rcall	.-904    	; 0x4a8 <init_pin>
 830:	61 e0       	ldi	r22, 0x01	; 1
 832:	8c e0       	ldi	r24, 0x0C	; 12
 834:	39 de       	rcall	.-910    	; 0x4a8 <init_pin>
	init_pin(13,e_output);
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	8d e0       	ldi	r24, 0x0D	; 13
 83a:	36 de       	rcall	.-916    	; 0x4a8 <init_pin>
 83c:	31 dc       	rcall	.-1950   	; 0xa0 <all_high>
	all_high();
 83e:	45 dd       	rcall	.-1398   	; 0x2ca <cal_display>
 840:	80 e0       	ldi	r24, 0x00	; 0
	//keypad_display();
	cal_display();
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	08 95       	ret

00000846 <__divmodhi4>:



}
 846:	97 fb       	bst	r25, 7
 848:	07 2e       	mov	r0, r23
 84a:	16 f4       	brtc	.+4      	; 0x850 <__divmodhi4+0xa>
 84c:	00 94       	com	r0
 84e:	06 d0       	rcall	.+12     	; 0x85c <__divmodhi4_neg1>
 850:	77 fd       	sbrc	r23, 7
 852:	08 d0       	rcall	.+16     	; 0x864 <__divmodhi4_neg2>
 854:	0b d0       	rcall	.+22     	; 0x86c <__udivmodhi4>
 856:	07 fc       	sbrc	r0, 7
 858:	05 d0       	rcall	.+10     	; 0x864 <__divmodhi4_neg2>
 85a:	3e f4       	brtc	.+14     	; 0x86a <__divmodhi4_exit>

0000085c <__divmodhi4_neg1>:
 85c:	90 95       	com	r25
 85e:	81 95       	neg	r24
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	08 95       	ret

00000864 <__divmodhi4_neg2>:
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255

0000086a <__divmodhi4_exit>:
 86a:	08 95       	ret

0000086c <__udivmodhi4>:
 86c:	aa 1b       	sub	r26, r26
 86e:	bb 1b       	sub	r27, r27
 870:	51 e1       	ldi	r21, 0x11	; 17
 872:	07 c0       	rjmp	.+14     	; 0x882 <__udivmodhi4_ep>

00000874 <__udivmodhi4_loop>:
 874:	aa 1f       	adc	r26, r26
 876:	bb 1f       	adc	r27, r27
 878:	a6 17       	cp	r26, r22
 87a:	b7 07       	cpc	r27, r23
 87c:	10 f0       	brcs	.+4      	; 0x882 <__udivmodhi4_ep>
 87e:	a6 1b       	sub	r26, r22
 880:	b7 0b       	sbc	r27, r23

00000882 <__udivmodhi4_ep>:
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	5a 95       	dec	r21
 888:	a9 f7       	brne	.-22     	; 0x874 <__udivmodhi4_loop>
 88a:	80 95       	com	r24
 88c:	90 95       	com	r25
 88e:	bc 01       	movw	r22, r24
 890:	cd 01       	movw	r24, r26
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
