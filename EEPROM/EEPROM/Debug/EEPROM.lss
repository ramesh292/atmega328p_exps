
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c2  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e0  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000060  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_Init>:
#include <avr/io.h>

void UART_Init()
{
	// set baud rate
	UBRR0H = (103>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//// enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//// set frame format: 8 data bits, 1 stop bit, no parity
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  96:	08 95       	ret

00000098 <EEPROM_Read>:
}

uint8_t EEPROM_Read(uint8_t address)
{
	while(EECR & (1<<EEPE)); // wait for completion of previous write.
  98:	f9 99       	sbic	0x1f, 1	; 31
  9a:	fe cf       	rjmp	.-4      	; 0x98 <EEPROM_Read>
	
	EEAR = address; // set up address register
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	92 bd       	out	0x22, r25	; 34
  a0:	81 bd       	out	0x21, r24	; 33
	
	EECR |= (1<<EERE); // start eeprom read by writing eere. 
  a2:	8f b3       	in	r24, 0x1f	; 31
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8f bb       	out	0x1f, r24	; 31
	
	return EEDR;// return data from data register.
  a8:	80 b5       	in	r24, 0x20	; 32
}
  aa:	08 95       	ret

000000ac <EEPROM_Write>:

void EEPROM_Write(uint8_t address,uint8_t data)
{
	while(EECR & (1<<EEPE)); //wait for completion of previous write.
  ac:	f9 99       	sbic	0x1f, 1	; 31
  ae:	fe cf       	rjmp	.-4      	; 0xac <EEPROM_Write>
	
	EEAR = address; // address 
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	92 bd       	out	0x22, r25	; 34
  b4:	81 bd       	out	0x21, r24	; 33
	EEDR = data; // data to be write
  b6:	60 bd       	out	0x20, r22	; 32
	
	EECR |= (1<<EEMPE);
  b8:	8f b3       	in	r24, 0x1f	; 31
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1<<EEPE);// start EEPROM write by setting EEPE.
  be:	8f b3       	in	r24, 0x1f	; 31
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	8f bb       	out	0x1f, r24	; 31
  c4:	08 95       	ret

000000c6 <UART_Transmit>:
	
}

 void UART_Transmit(uint8_t data)
 {
	 while(!(UCSR0A & (1<<UDRE0)));
  c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <UART_Transmit>
	 UDR0 = data;
  ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d2:	08 95       	ret

000000d4 <UART_Receive>:
 }
 
 uint8_t UART_Receive()
 {
 // wait for data to be received
 while(!(UCSR0A & (1<<RXC0)));
  d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	88 23       	and	r24, r24
  da:	e4 f7       	brge	.-8      	; 0xd4 <UART_Receive>
 
 // get and return received data from buffer
 return UDR0;
  dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 }
  e0:	08 95       	ret

000000e2 <EEPROM_function>:
 
 void EEPROM_function(){
	 uint8_t data;
	 data = UART_Receive();
  e2:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_Receive>
	 uint8_t address = 0x000;
	 EEPROM_Write(address,data);
  e6:	68 2f       	mov	r22, r24
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 56 00 	call	0xac	; 0xac <EEPROM_Write>
	 UART_Transmit(EEPROM_Read(address));
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_Read>
  f4:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_Transmit>
  f8:	08 95       	ret

000000fa <main>:
 }

int main(void)
{
	UART_Init();
  fa:	0e 94 40 00 	call	0x80	; 0x80 <UART_Init>
	EEARH |=(1<<EEAR8);
  fe:	82 b5       	in	r24, 0x22	; 34
 100:	81 60       	ori	r24, 0x01	; 1
 102:	82 bd       	out	0x22, r24	; 34
	EEARL |= (1<<EEAR0);
 104:	81 b5       	in	r24, 0x21	; 33
 106:	81 60       	ori	r24, 0x01	; 1
 108:	81 bd       	out	0x21, r24	; 33
	
	
    /* Replace with your application code */
    while (1) 
    {
		EEPROM_function();
 10a:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_function>
 10e:	fd cf       	rjmp	.-6      	; 0x10a <main+0x10>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
