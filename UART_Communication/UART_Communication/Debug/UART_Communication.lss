
UART_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d4  00800100  00800100  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007df  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000688  00000000  00000000  00000af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031a  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  0000197d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001a7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_20>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	28 e0       	ldi	r18, 0x08	; 8
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 3d       	cpi	r26, 0xD4	; 212
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 89 00 	call	0x112	; 0x112 <main>
  88:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Timer_Init>:
 uint8_t time=0;
 
 
 void Timer_Init()
 {
 TCCR0B = (1<<CS02)|(1<<CS00); // prescalar 1024 set , 256 step total, 16MHz tick per second.
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	85 bd       	out	0x25, r24	; 37
 TIMSK0 = (1<<TOIE0); // overflow interrupt enable.
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  9a:	08 95       	ret

0000009c <UART_Init>:
 }
 
 void UART_Init()
 {
 	// set baud rate
 	UBRR0H = (103>>8);
  9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 	UBRR0L = 103;
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 	
 	//// enable receiver and transmitter
 	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  a6:	88 ed       	ldi	r24, 0xD8	; 216
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 	//// set frame format: 8 data bits, 1 stop bit, no parity
 	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b2:	08 95       	ret

000000b4 <UART_Transmit>:
 }
 //
 void UART_Transmit(){
 	UDR0 = transmitBuffer[transmitBufferIndex++];
  b4:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <transmitBufferIndex>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	8e 0f       	add	r24, r30
  bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <transmitBufferIndex>
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	e4 51       	subi	r30, 0x14	; 20
  c4:	fb 4f       	sbci	r31, 0xFB	; 251
  c6:	80 81       	ld	r24, Z
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <DataProcessFunction>:
 }
 
 
 void DataProcessFunction(){
 	if( 1==flag && transmitBufferIndex < receivedBufferIndex){
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	d9 f4       	brne	.+54     	; 0x10c <DataProcessFunction+0x3e>
  d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <transmitBufferIndex>
  da:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <receivedBufferIndex>
  de:	84 17       	cp	r24, r20
  e0:	a8 f4       	brcc	.+42     	; 0x10c <DataProcessFunction+0x3e>
 		
 		for(int i=transmitBufferIndex;i<receivedBufferIndex;i++)
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <DataProcessFunction+0x2a>
 		{
 			transmitBuffer[i]=receivedBuffer[i];
  e6:	fc 01       	movw	r30, r24
  e8:	ec 5f       	subi	r30, 0xFC	; 252
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	20 81       	ld	r18, Z
  ee:	fc 01       	movw	r30, r24
  f0:	e4 51       	subi	r30, 0x14	; 20
  f2:	fb 4f       	sbci	r31, 0xFB	; 251
  f4:	20 83       	st	Z, r18
 
 
 void DataProcessFunction(){
 	if( 1==flag && transmitBufferIndex < receivedBufferIndex){
 		
 		for(int i=transmitBufferIndex;i<receivedBufferIndex;i++)
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	24 2f       	mov	r18, r20
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	82 17       	cp	r24, r18
  fe:	93 07       	cpc	r25, r19
 100:	94 f3       	brlt	.-28     	; 0xe6 <DataProcessFunction+0x18>
 		{
 			transmitBuffer[i]=receivedBuffer[i];
 		}
 		
 		flag = 0;
 102:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag>
 		UART_Transmit();
 106:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_Transmit>
 10a:	08 95       	ret
 	}else{
		 flag = 0;
 10c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag>
 110:	08 95       	ret

00000112 <main>:
 }
 
 
 int main(void)
 {
	 cli();
 112:	f8 94       	cli
     UART_Init();
 114:	0e 94 4e 00 	call	0x9c	; 0x9c <UART_Init>
	 Timer_Init();
 118:	0e 94 48 00 	call	0x90	; 0x90 <Timer_Init>
	 sei();
 11c:	78 94       	sei
     while (1) 
     {
 		DataProcessFunction();
 11e:	0e 94 67 00 	call	0xce	; 0xce <DataProcessFunction>
 122:	fd cf       	rjmp	.-6      	; 0x11e <main+0xc>

00000124 <__vector_18>:
 }
 
 
 
 ISR(USART_RX_vect)
 {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
 	receivedBuffer[receivedBufferIndex++]=UDR0;
 134:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <receivedBufferIndex>
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	8e 0f       	add	r24, r30
 13c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <receivedBufferIndex>
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 146:	ec 5f       	subi	r30, 0xFC	; 252
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	80 83       	st	Z, r24
 	time=0;
 14c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 	//flag=1;
 }
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_20>:
 
 ISR(USART_TX_vect)
 {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
 	
 	if (transmitBufferIndex < receivedBufferIndex)
 170:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <transmitBufferIndex>
 174:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <receivedBufferIndex>
 178:	e8 17       	cp	r30, r24
 17a:	50 f4       	brcc	.+20     	; 0x190 <__vector_20+0x30>
 	{
 		 //Load the next byte from the transmit buffer into the USART data register (UDR0)
 		UDR0 = transmitBuffer[transmitBufferIndex++];
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	8e 0f       	add	r24, r30
 180:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <transmitBufferIndex>
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e4 51       	subi	r30, 0x14	; 20
 188:	fb 4f       	sbci	r31, 0xFB	; 251
 18a:	80 81       	ld	r24, Z
 18c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 	if(transmitBufferIndex==transmitBufferSize)
 	{
 		transmitBufferIndex = 0;
 	}
 	
 }
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_16>:
 
 
 ISR(TIMER0_OVF_vect)
 {
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
	 if(time>61)
 1ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b0:	8e 33       	cpi	r24, 0x3E	; 62
 1b2:	28 f0       	brcs	.+10     	; 0x1be <__vector_16+0x1e>
	 {
		 time=0;
 1b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		 flag=1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag>
	 }
	 time++;
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 }
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
